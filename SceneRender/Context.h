/**   A pipeline job [processing] context consists of      - a list of triangles to process   - a pointer to the scene in which those triangles belong   - a pointer to the framebuffer that will hold those triangles'      rasterized output   - a pool of triangles and a pool of fragments (resources)     to be used    It also includes operations for "forking" & "joining"    sub-contexts, which allow re-distribution of workload    (triangle list) and resources among contexts for jobs    that can be processed concurrently.**/#ifndef CONTEXT_H#define CONTEXT_H#include "../Scene/Scene.h"#include "FrameBuffer.h"class Context{  public:  Scene *scene;  FrameBuffer *fb;  List<Triangle> *triangles;  Pool<Triangle> *trianglePool;  Pool<Fragment> *fragmentPool;  //private:  Context *parent;  Context *children;  int childCount;  public:  Context();  ~Context();  private: Context(Context *parent); public:    void set(Scene *scene, FrameBuffer *fb);  private: bool resetChildren(int count, int flag); public:  // array operations  static Context *newArray(Context *parent, int size);  static void deleteArray(Context *array, int size);    private:  static Pool<Triangle> **getTrianglePoolPtrs(Context *array, int size);  static Pool<Fragment> **getFragmentPoolPtrs(Context *array, int size);  static List<Triangle> **getTriangleListPtrs(Context *array, int size);  static void setTrianglePoolPtrs(Context *array, int size, Pool<Triangle> **trianglePoolPtrs);  static void setFragmentPoolPtrs(Context *array, int size, Pool<Fragment> **fragmentPoolPtrs);  static void setTriangleListPtrs(Context *array, int size, List<Triangle> **triangleListPtrs);    public:  // fork/join   static Context *fork(Context *src, int count, int flag=0);  static Context *join(Context *src, int count, int flag=0);};#endif