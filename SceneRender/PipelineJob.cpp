#include "PipelineJob.h"PipelineJob::PipelineJob(list<PipelineStage*> stages){  this->stages = stages;  this->context = 0;  this->stage = 0;}void PipelineJob::process(){  // Process triangles through pipeline stages  // until a stage that modifies input arrangement is reached  while (!stages.empty())  {    stage = stages.front();    stages.pop_front();        if (stage->getAttributes() & (STAGE_ATTRIB_SERIAL))      return;    stage->processTriangles(context);    if (stage->getAttributes() & (STAGE_ATTRIB_WRITE_TRIANGLE_LIST | STAGE_ATTRIB_WRITE_FRAGMENT_LIST))      return;  }    stage = 0;}PipelineStage *PipelineJob::getStage(){  return stage;}